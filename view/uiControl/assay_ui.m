% obj is the main testbench object
% --- build up a Assay control ui in the assigned panel (or popup)
% parentName is a string describing of the parent panel (or popup)
% --- 1. For popup: should be like 'manual', 'selectPeaks' ...
% --- 2. For panel: should be the same as in panel_index function
% parentObj is the parent object for the ui (type: double)
% Victor Bass 2013;
% Modified by Vince Wu - Nov 2013

function obj = assay_ui(obj, parentName, parentObj, position)

parentStruct = getParentStruct(parentName);
if (~isempty(strfind(parentStruct, 'panel')))
    panelIndex = str2double(parentStruct(end - 1));
    parentStruct = parentStruct(1:end - 3);
else
    panelIndex = 1;
end

test_type = obj.AppSettings.infoParams.Task;

%% Assay Panel
% panel element size variables
stringBoxSize = [0.45, 0.03];
pushButtonSize = [0.20, 0.05];
editBoxSize = [0.15, 0.03];

%% parent panel
obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel = uipanel(...
    'Parent', parentObj, ...
    'Unit', 'Pixels', ...
    'Units', 'normalized', ...
    'Visible', 'on', ...
    'BackgroundColor', [0.9, 0.9, 0.9], ...
    'Title', 'Assay', ...
    'FontSize', 9, ...
    'FontWeight', 'Bold', ...
    'Position', position);

%% settings button
obj.gui.(parentStruct)(panelIndex).assayUI.settingsButton = uicontrol(...
    'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
    'Style', 'pushbutton', ...
    'Enable', 'on', ...
    'Units', 'normalized', ...
    'String', 'Settings', ...
    'FontSize', 9, ...
    'Position', [0.766, 0.943, pushButtonSize], ...
    'Callback', {@settings_button_cb, obj});

% %% optimize sweep range string
% obj.gui.(parentStruct)(panelIndex).assayUI.optimizeString = uicontrol(...
%     'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%     'Style', 'text', ...
%     'HorizontalAlignment','left', ...
%     'BackgroundColor', [0.9, 0.9, 0.9], ...
%     'Units', 'normalized', ...
%     'String', 'Optimize Sweep Range:', ...
%     'FontSize', 9, ...
%     'Position', [0.01, 0.89, stringBoxSize]);
%
% % optimize checkbox
% obj.gui.(parentStruct)(panelIndex).assayUI.optimizeCheckbox = uicontrol(...
%     'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%     'Style', 'checkbox', ...
%     'BackgroundColor', [0.9, 0.9, 0.9], ...
%     'Enable', 'on', ...
%     'Units', 'normalized', ...
%     'Position', [0.425, 0.895, 0.1, 0.1], ...
%     'Callback', {@optimize_checkbox_cb, obj});


% %% Manually switch reagents string
% % determine if more than one device is being tested, if so, display option
% deviceName = fieldnames(obj.devices);
% devicesToTest = 0;
% for i = 1:length(deviceName)
%     if obj.devices.(deviceName{i}).getProp('Selected')
%         devicesToTest = devicesToTest + 1;
%     end
% end
%
% if devicesToTest > 1
%     obj.gui.(parentStruct)(panelIndex).assayUI.batchTestingString = uicontrol(...
%         'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%         'Style', 'text', ...
%         'HorizontalAlignment','left', ...
%         'BackgroundColor', [0.9, 0.9, 0.9], ...
%         'Units', 'normalized', ...
%         'String', 'Manually Switch Reagents:', ...
%         'Enable', 'on', ...
%         'FontSize', 9, ...
%         'Position', [0.01, 0.71, stringBoxSize]);
%
%     obj.gui.(parentStruct)(panelIndex).assayUI.batchTestingCheckbox = uicontrol(...
%         'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%         'Style', 'checkbox', ...
%         'BackgroundColor', [0.9, 0.9, 0.9], ...
%         'Enable', 'on', ...
%         'Units', 'normalized', ...
%         'Position', [0.425, 0.72, 0.1, 0.1], ...
%         'Callback', {@batch_testing_checkbox_cb, obj});
%
% end

%% recipe string
obj.gui.(parentStruct)(panelIndex).assayUI.recipeString = uicontrol(...
    'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
    'Style', 'text', ...
    'HorizontalAlignment','left', ...
    'BackgroundColor', [0.9, 0.9, 0.9], ...
    'Units', 'normalized', ...
    'String', 'Recipe File:', ...
    'FontSize', 9, ...
    'Position', [0.01, 0.951, stringBoxSize]);

% filename display box
obj.gui.(parentStruct)(panelIndex).assayUI.fileNameEdit = uicontrol(...
    'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
    'Style', 'edit', ...
    'BackGroundColor', [0.8, 0.8, 0.8], ...
    'Enable', 'on', ...
    'HorizontalAlignment','left', ...
    'Units', 'normalized', ...
    'FontSize', 9, ...
    'String', obj.recipeFile,...
    'Position', [0.23, 0.952, stringBoxSize]);

% % recipe load button
% obj.gui.(parentStruct)(panelIndex).assayUI.loadRecipeEdit = uicontrol(...
%     'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%     'Style', 'pushbutton', ...
%     'Enable', 'on', ...
%     'Units', 'normalized', ...
%     'FontSize', 9, ...
%     'String', 'Load Recipe', ...
%     'Position', [0.72, 0.65, pushButtonSize], ...
%     'Callback', {@load_recipe_cb, obj, parentStruct});

obj.gui.(parentStruct)(panelIndex).assayUI.loadRecipe = uicontrol(...
    'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
    'Style', 'pushbutton', ...
    'CData',  iconRead(fullfile('icons', 'file_open.png')),...
    'FontSize', 10, ...
    'Units', 'normalized', ...
    'Position', [.68, .951, .066, .035], ...
    'Callback', {@load_recipe_cb, obj, parentStruct, panelIndex, test_type});

% %% current reagent string
% obj.gui.(parentStruct)(panelIndex).assayUI.currentReagentString = uicontrol(...
%     'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%     'Style', 'text', ...
%     'HorizontalAlignment','left', ...
%     'BackgroundColor', [0.9, 0.9, 0.9], ...
%     'Units', 'normalized', ...
%     'String', 'Current Reagent:', ...
%     'FontSize', 9, ...
%     'Position', [0.01, 0.54, stringBoxSize]);
%
% % current reagent value box
% obj.gui.(parentStruct)(panelIndex).assayUI.reagentValue = uicontrol(...
%     'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%     'Style', 'text', ...
%     'Enable', 'on', ...
%     'Units', 'normalized', ...
%     'FontSize', 9, ...
%     'Position', [0.15, 0.56, 1.2*editBoxSize]);
%
% % time remaining string
% obj.gui.(parentStruct)(panelIndex).assayUI.timeRemainingString = uicontrol(...
%     'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%     'Style', 'text', ...
%     'HorizontalAlignment','left', ...
%     'BackgroundColor', [0.9, 0.9, 0.9], ...
%     'Units', 'normalized', ...
%     'String', 'Reagent Time Remaining:', ...
%     'FontSize', 9, ...
%     'Position', [0.47, 0.54, stringBoxSize]);
%
% % time value box
% obj.gui.(parentStruct)(panelIndex).assayUI.timeValue = uicontrol(...
%     'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%     'Style', 'text', ...
%     'Enable', 'off', ...
%     'Units', 'normalized', ...
%     'FontSize', 9, ...
%     'Position', [0.7, 0.56, editBoxSize]);

%% pumped volume string
obj.gui.(parentStruct)(panelIndex).assayUI.pumpedVolumeString = uicontrol(...
    'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
    'Style','text', ...
    'BackgroundColor',[0.9 0.9 0.9 ], ...
    'HorizontalAlignment','left', ...
    'Units', 'normalized', ...
    'Position', [.01, .90, stringBoxSize], ...
    'String','Pumped Vol(mL):', ...
    'FontSize', 9);

% pumped volume display box
obj.gui.(parentStruct)(panelIndex).assayUI.pumpedVolumeDisp = uicontrol(...
    'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
    'Style','text', ...
    'Enable', 'on', ...
    'Units', 'normalized', ...
    'Position', [.331, .90, editBoxSize], ...
    'String', '0.0');

obj.gui.(parentStruct)(panelIndex).assayUI.purgeButton = uicontrol(...
    'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
    'Style', 'pushbutton', ...
    'Enable', 'on', ...
    'Units', 'normalized', ...
    'String', 'Purge', ...
    'FontSize', 9, ...
    'Position', [0.6, 0.9, 0.15, 0.03], ...
    'Callback', {@purge_button_cb, obj});

% % pumped volume limit string
% obj.gui.(parentStruct)(panelIndex).assayUI.limitVolumeSring = uicontrol(...
%     'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%     'Style','text', ...
%     'BackgroundColor',[0.9 0.9 0.9 ], ...
%     'HorizontalAlignment','left', ...
%     'Units', 'normalized', ...
%     'Position', [.55, .45, stringBoxSize(1)/2, stringBoxSize(2)], ...
%     'String','Limit (uL):', ...
%     'FontSize', 9);
%
% % pumped volume limit value
% obj.gui.(parentStruct)(panelIndex).assayUI.limitVolumeDisp = uicontrol(...
%     'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%     'Style','text', ...
%     'Enable', 'on', ...
%     'Units', 'normalized', ...
%     'Position', [.7, .47, editBoxSize]);

%% skip to next step
obj.gui.(parentStruct)(panelIndex).assayUI.skipToNextStepButton = uicontrol(...
    'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
    'Style', 'pushbutton', ...
    'Enable', 'on', ...
    'Units', 'normalized', ...
    'String', 'Next Step', ...
    'FontSize', 9, ...
    'UserData', 0,...
    'Position', [0, 0.87, 0.25, 0.03], ...
    'Callback', @skipToNextStepCB);
%    'Callback', {@skipToNextStepCB, obj,  parentName, []});

%% sweep
% removed by shon 5/11/2014 - assume user will use coordinate panel or device selection panel
% obj.gui.(parentStruct)(panelIndex).assayUI.sweepButton = uicontrol(...
%     'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%     'Style', 'pushbutton', ...
%     'Enable', 'on', ...
%     'Units', 'normalized', ...
%     'String', 'Sweep', ...
%     'FontSize', 9, ...
%     'Position', [0.3, 0.87, 0.25, 0.03], ...
%     'Callback', {@sweep_button_cb, obj,  parentName, []});

obj.gui.(parentStruct)(panelIndex).assayUI.sweepSettingsButton = uicontrol(...
    'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
    'Style', 'pushbutton', ...
    'Enable', 'on', ...
    'Units', 'normalized', ...
    'String', 'Sweep Settings', ...
    'FontSize', 9, ...
    'Position', [0.6, 0.87, 0.35, 0.03], ...
    'Callback', {@sweep_settings_button_cb, obj});


%% use fast il engine string
% % only display and enable if N7744x installed is available
% if strcmp(obj.instr.detector.Name, 'Agilent Detector N7744A')
%     obj.gui.(parentStruct)(panelIndex).assayUI.fastIL_engine_string = uicontrol(...
%         'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%         'Style', 'text', ...
%         'HorizontalAlignment','left', ...
%         'BackgroundColor', [0.9, 0.9, 0.9], ...
%         'Units', 'normalized', ...
%         'String', 'Use Fast IL engine:', ...
%         'FontSize', 9, ...
%         'Enable', 'on', ...
%         'Position', [0.01, 0.854, stringBoxSize]);
%
%     obj.gui.(parentStruct)(panelIndex).assayUI.fastIL_engine_checkbox = uicontrol(...
%         'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
%         'Style', 'checkbox', ...
%         'BackgroundColor', [0.9, 0.9, 0.9], ...
%         'Enable', 'on', ...
%         'Units', 'normalized', ...
%         'Position', [0.36, 0.846, 0.05, 0.05], ...
%         'Callback', {@fast_IL_engine_checkbox_cb, obj});
% else
%     obj.AppSettings.AssayParams.UseFastILEngine = 0;
% end

%% recipe summary table
if obj.AppSettings.AssayParams.TranslateRecipeTimeToSweeps
    colNamesRecipeSummary =  {'Sweeps Left','Reagent', 'PauseAfter', 'Velocity','Well','Temp','RI','Comment'};
else
    colNamesRecipeSummary =  {'Time Left','Reagent', 'PauseAfter', 'Velocity','Well','Temp','RI','Comment'};
end
colFormatRecipeSummary = {'char','char', 'logical', 'char','char','char','char','char'};
enablePause = false;
if strcmpi(test_type, 'BioAssay')
    enablePause = true;
end
colEditableRecipeSummary = [false,false,enablePause,false,false,false,false,false];
colWidthRecipeSummary = {75,80,45,50,40,45,50,200};

obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable = [];

obj.gui.(parentStruct)(panelIndex).assayUI.recipeSummaryTable = uitable(...
    'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
    'ColumnName', colNamesRecipeSummary, ...
    'ColumnFormat', colFormatRecipeSummary, ...
    'ColumnEditable', colEditableRecipeSummary, ...
    'Units','normalized', ...
    'Position', [0.01, 0.47, 0.98, 0.38], ...
    'Data', obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable, ...
    'FontSize', 9, ...
    'ColumnWidth', colWidthRecipeSummary, ...
    'Enable','on', ...
    'Visible', 'on', ...
    'CellSelectionCallback', {@recipe_change_cb, obj, parentStruct, panelIndex, test_type});

if (~isempty(obj.recipeFile) && ~isempty(obj.recipe))
    createRecipeTable(obj, parentStruct, panelIndex)
end

%% test summary table
colNamesTestSummary =  {'Device ID', 'Status', 'Comment'};
colFormatTestSummary = {'char',      'char',   'char'};
colEditableTestSummary = [false,      false,   false];
colWidthTestSummary = {100,     75,      200};

deviceName = fieldnames(obj.devices);
% need to make summary table accessable to scripts to update status column from scripts
obj.gui.(parentStruct)(panelIndex).assayUI.deviceTable = {};
table_index = 0;

% get a list of devices to be tested
testStatus = {'Untested', 'In progress', 'Done'};
for i = 1:length(deviceName)
    if obj.devices.(deviceName{i}).getProp('Selected')
        table_index = table_index + 1;
        obj.gui.(parentStruct)(panelIndex).assayUI.deviceTable{table_index, 1} = ...
            obj.devices.(deviceName{i}).Name;
        obj.gui.(parentStruct)(panelIndex).assayUI.deviceTable{table_index, 2} = ...
            testStatus{obj.devices.(deviceName{i}).getProp('TestStatus') + 1};
        obj.gui.(parentStruct)(panelIndex).assayUI.deviceTable{table_index, 3} = ...
            obj.devices.(deviceName{i}).Comment;
    end
end

obj.gui.(parentStruct)(panelIndex).assayUI.resultTable = uitable(...
    'Parent', obj.gui.(parentStruct)(panelIndex).assayUI.mainPanel, ...
    'ColumnName', colNamesTestSummary, ...
    'ColumnFormat', colFormatTestSummary, ...
    'ColumnEditable', colEditableTestSummary, ...
    'Units','normalized', ...
    'Position', [0.01, 0.01, 0.98, 0.455], ...
    'Data', obj.gui.(parentStruct)(panelIndex).assayUI.deviceTable, ...
    'FontSize', 9, ...
    'ColumnWidth',colWidthTestSummary, ...
    'Enable','on', ...
    'Visible', 'on');

% Popup window to load recipe file
if ~isstruct(obj.recipe) % a recipe file has NOT been loaded already
    load_recipe_cb([], [], obj, parentStruct, panelIndex, test_type)
    settings_button_cb([], [], obj);
end

end

%% Callbacks
function skipToNextStepCB (hObject, eventData)
% capture event and disable button
set(hObject, 'enable', 'off');
set(hObject, 'UserData', 1);
end

function resetSkipToNextStepCB (hObject, eventData)
% event executed, re-enable button
set(hObject, 'enable', 'on');
set(hObject, 'UserData', 0);
end

function editSaltStepsRecipe(obj)
name = 'Edit Recipe';
reagent = obj.recipe.reagent;
well = obj.recipe.well;
numOfReagent = length(reagent);
prompt = cell(numOfReagent, 1);
defaultWell = cell(numOfReagent, 1);
% spaceSize = ones(numOfReagent, 2);
% spaceSize(:, 2) = 10;
for n = 1:numOfReagent
    prompt{n} = sprintf('Well Number for %s (0 to exclude)', reagent{n});
    defaultWell{n} = num2str(well(n));
end
editWell = str2double(inputdlg(prompt, name, 1, defaultWell));
% exclude reagent
includeReagentInedx = find(editWell ~= 0);
fields = fieldnames(obj.recipe);
for f = 1:length(fields)
    obj.recipe.(fields{f}) = obj.recipe.(fields{f})(includeReagentInedx);
end
editWell = editWell(includeReagentInedx);
%
for w = 1:length(obj.recipe.well)
    if well(w) ~= editWell(w)
        obj.recipe.well(w) = editWell(w);
    end
end
end

function settings_button_cb(~, ~, obj)
obj.settingsWin('AssayParams');
end

function purge_button_cb(~, ~, obj)
if obj.instr.pump.isConnected
    obj.instr.pump.purge;
end
end

% copied from laser_ui.m shon 12/27/2013
function sweep_button_cb(~, ~, obj, parentName, axesHandle)
selectedDetectors = obj.instr.detector.getProp('SelectedDetectors');
numOfSelected = sum(selectedDetectors);
[wvlVals, pwrVals] = sweep(obj); % calls control script sweep
obj.gui.sweepScan{end+1} = [wvlVals, pwrVals];
[~, numDetectors] = size(pwrVals);
colors = {'r', 'g', 'b', 'c', 'm', 'k'};
plotIndex = 0;
if ~isempty(axesHandle);
    for kk = 1: numDetectors
        ThisSweep(kk).pwr = pwrVals(:, kk);
        ThisSweep(kk).wvl = wvlVals(:, kk);
        if strcmpi(parentName, 'selectPeaks')
            % Select Peaks panel always have four subplots
            subplot(axesHandle(kk));
            plot(wvlVals(:, kk), pwrVals(:, kk), colors{kk});
            obj.devices.(obj.chip.CurrentLocation).setProp('ScanNumber', 0);
        elseif selectedDetectors(kk)
            plotIndex = plotIndex + 1;
            subplot(axesHandle(plotIndex));
            plot(wvlVals(:, kk), pwrVals(:, kk), colors{plotIndex});
        end
        title(['Detector ', num2str(kk)]);
        xlabel('Wavelength [nm]');
        ylabel('Power [dBm]');
    end
    obj.devices.(obj.chip.CurrentLocation).setProp('ThisSweep', ThisSweep);
    params = scanParams(obj);
    obj.devices.(obj.chip.CurrentLocation).saveData(wvlVals, pwrVals, params);
    % Check if data is the correct size
    if length(wvlVals) ~= length(pwrVals)
        err = MException('SelectPeak:DataFormat','xdata and ydata are not the same length');
        throw(err);
    end
else
    if isempty(obj.gui.sweepScanH)
        obj.gui.sweepScanH = figure(...
            'Name', 'Sweep Scan Data', ...
            'NumberTitle', 'off', ...
            'Units', 'normalized', ...
            'Position', [0, 0, 0.66, 0.66], ...
            'DeleteFcn', {@sweepScanDelete, obj});
        movegui(obj.gui.sweepScanH, 'center');
    else
        figure(obj.gui.sweepScanH);
        hold on;
    end
    thisColor = colors{length(obj.gui.sweepScan)};
    for ii = 1:numDetectors
        if selectedDetectors(ii)
            plotIndex = plotIndex + 1;
            subplot(numOfSelected, 1, plotIndex)
            plot(wvlVals(:,ii), pwrVals(:,ii), thisColor);
            title(['Detector ', num2str(ii)]);
            xlabel('Wavelength [nm]');
            ylabel('Power [dBm]');
        end
    end
    hold off;
    if length(obj.gui.sweepScan) == length(colors)
        obj.gui.sweepScan = {};
    end
end
end

function sweep_settings_button_cb(~, ~, obj)
obj.settingsWin('SweepParams');
end


%     function optimize_checkbox_cb(hObject, ~, obj)
%         state = get(hObject, 'UserData');
%         if state
%             set(hObject, 'UserData',0);
%             obj.AppSettings.Test.OptimizeSweepRange = 0;
%         else
%             set(hObject, 'UserData',1);
%             obj.AppSettings.Test.OptimizeSweepRange = 1;
%         end
%     end

function fast_IL_engine_checkbox_cb(hObject, ~, obj)
state = get(hObject, 'UserData');
if state
    set(hObject, 'UserData',0);
    obj.AppSettings.AssayParams.UseFastILEngine = 0;
else
    set(hObject, 'UserData',1);
    obj.AppSettings.AssayParams.UseFastILEngine = 1;
end
end

%     function batch_testing_checkbox_cb(hObject, ~, obj)
%         state = get(hObject, 'UserData');
%         if state
%             set(hObject, 'UserData',0)
%             obj.AppSettings.Test.BatchTesting = 1;
%         else
%             set(hObject, 'UserData',1)
%             obj.AppSettings.Test.BatchTesting = 1;
%         end
%     end

function load_recipe_cb(~, ~, obj, parentStruct, panelIndex, test_type)
if strcmpi(test_type, 'SaltSteps')
    obj.recipeFile = 'DEFAULT_SaltSteps.txt';
    path = '..\siphotestbenchbio\defaults\recipeFiles\';
elseif strcmpi(test_type, 'BioAssay')
    path = strcat(obj.AppSettings.path.userData, obj.AppSettings.infoParams.Name, '\recipeFiles\');
    recipeFiles = dir(strcat(path, '*.txt'));
    if isempty(recipeFiles)
        path = '..\siphotestbenchbio\defaults\recipeFiles\';
    end
    [obj.recipeFile, path] = uigetfile('*.txt', 'Select the recipe file.', path);
elseif strcmpi(test_type, 'VirtualTestMode')
    obj.recipeFile = 'recipe.txt';
    path = obj.AppSettings.path.testModeData;
end
if ~isequal(obj.recipeFile, 0) && ~isequal(path, 0)
    fn = strcat(path, obj.recipeFile);
    if exist(fn, 'file') == 2 % Is a file
        obj.recipe = load_recipe(obj, fn);
    end
    % recipe loaded, display filename
    if ~isempty(obj.recipe)
        if strcmpi(test_type, 'SaltSteps')
            editSaltStepsRecipe(obj);
            checkSaltStepTemp(obj);
        end
        createRecipeTable(obj, parentStruct, panelIndex);
    end
end
end

function checkSaltStepTemp(obj)
targetTemp = obj.instr.thermalControl.getParam('TargetTemp');
if any(targetTemp ~= obj.recipe.temp)
    buttonName = questdlg(sprintf('WARNING: Recipe file temperature \n      %dC\ndoes not match current TEC temperature \n      %dC\nPlease choose the correct temperature:', obj.recipe.temp(1), targetTemp), ...
        'Recipe Temperature Conflicts', 'Recipe Default Temp', 'TEC Target Temp', 'TEC Target Temp');
    if strcmpi(buttonName, 'TEC Target Temp')
        for n = 1:length(obj.recipe.temp)
            if targetTemp ~= obj.recipe.temp(n)
                obj.recipe.temp(n) = targetTemp;
            end
        end
    end
end
end

function createRecipeTable(obj, parentStruct, panelIndex)
obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable = ...
    cell(length(obj.recipe.reagent), length(fieldnames(obj.recipe)));

if obj.AppSettings.AssayParams.TranslateRecipeTimeToSweeps
    obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable(:, 1) = ...
        num2cell(round(obj.recipe.time));
else
    obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable(:, 1) = ...
        num2cell(obj.recipe.time);
end

obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable(:, 2) = ...
    obj.recipe.reagent;
obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable(:, 3) = ...
    num2cell(obj.recipe.pauseRecipe);
obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable(:, 4) = ...
    num2cell(obj.recipe.velocity);
obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable(:, 5) = ...
    num2cell(obj.recipe.well);
obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable(:, 6) = ...
    num2cell(obj.recipe.temp);
obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable(:, 7) = ...
    num2cell(obj.recipe.ri);
obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable(:, 8) = ...
    obj.recipe.comment;

set(obj.gui.(parentStruct)(panelIndex).assayUI.recipeSummaryTable, ...
    'Data', ...
    obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable);
set(obj.gui.(parentStruct)(panelIndex).assayUI.fileNameEdit, ...
    'String', ...
    obj.recipeFile);
end

function recipe_change_cb(~, eventdata, obj, parentStruct, panelIndex, test_type)
if strcmpi(test_type, 'BioAssay')
    if numel(eventdata.Indices)~=0
        row = eventdata.Indices(1);
        column = eventdata.Indices(2);
        if column == 3 % 'PauseAfter' to change pause during salt
            pause(0.5)
            table = get(obj.gui.(parentStruct)(panelIndex).assayUI.recipeSummaryTable, 'Data');
            pauseRecipe = table{row, column};
            obj.recipe.pauseRecipe(row) = pauseRecipe;
            obj.gui.(parentStruct)(panelIndex).assayUI.recipeTable{row, column} = pauseRecipe;
        end
    end
end
end